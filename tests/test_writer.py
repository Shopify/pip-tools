from pytest import fixture, mark, raises

from piptools._compat import FormatControl
from piptools.utils import comment
from piptools.writer import OutputWriter


@fixture
def writer():
    return OutputWriter(src_files=["src_file", "src_file2"], dst_file="dst_file",
                        dry_run=True,
                        emit_header=True, emit_index=True, emit_trusted_host=True,
                        annotate=True,
                        generate_hashes=False,
                        default_index_url=None, index_urls=[],
                        trusted_hosts=[],
                        format_control=FormatControl(set(), set()),
                        allow_unsafe=False)


def test_format_requirement_annotation_editable(from_editable, writer):
    # Annotations are printed as comments at a fixed column
    ireq = from_editable('git+git://fake.org/x/y.git#egg=y')
    reverse_dependencies = {'y': ['xyz']}

    assert (writer._format_requirement(ireq,
                                       reverse_dependencies,
                                       primary_packages=[]) ==
            '-e git+git://fake.org/x/y.git#egg=y  ' + comment('# via xyz'))


def test_format_requirement_annotation(from_line, writer):
    ireq = from_line('test==1.2')
    reverse_dependencies = {'test': ['xyz']}

    assert (writer._format_requirement(ireq,
                                       reverse_dependencies,
                                       primary_packages=[]) ==
            'test==1.2                 ' + comment('# via xyz'))


def test_format_requirement_annotation_lower_case(from_line, writer):
    ireq = from_line('Test==1.2')
    reverse_dependencies = {'test': ['xyz']}

    assert (writer._format_requirement(ireq,
                                       reverse_dependencies,
                                       primary_packages=[]) ==
            'test==1.2                 ' + comment('# via xyz'))


def test_format_requirement_not_for_primary(from_line, writer):
    "Primary packages should not get annotated."
    ireq = from_line('test==1.2')
    reverse_dependencies = {'test': ['xyz']}

    assert (writer._format_requirement(ireq,
                                       reverse_dependencies,
                                       primary_packages=['test']) ==
            'test==1.2')


def test_format_requirement_not_for_primary_lower_case(from_line, writer):
    "Primary packages should not get annotated."
    ireq = from_line('Test==1.2')
    reverse_dependencies = {'test': ['xyz']}

    assert (writer._format_requirement(ireq,
                                       reverse_dependencies,
                                       primary_packages=['test']) ==
            'test==1.2')


def test_format_requirement_environment_marker(from_line, writer):
    "Environment markers should get passed through to output."
    ireq = from_line('test ; python_version == "2.7" and platform_python_implementation == "CPython"')
    reverse_dependencies = set()

    result = writer._format_requirement(
        ireq, reverse_dependencies, primary_packages=['test'],
        marker=ireq.markers)
    assert (result ==
            'test ; python_version == "2.7" and platform_python_implementation == "CPython"')


@mark.parametrize(('allow_unsafe',), [(True,), (False,)])
def test_iter_lines__unsafe_dependencies(from_line, allow_unsafe, writer):
    writer.allow_unsafe = allow_unsafe

    ireq = [from_line('test==1.2')]
    unsafe_req = [from_line('setuptools')]
    reverse_dependencies = {'test': ['xyz']}

    str_lines = list(writer._iter_lines(
        ireq,
        unsafe_req,
        reverse_dependencies,
        ['test'],
        {},
        None,
    ))
    assert comment('# The following packages are considered to be unsafe in a requirements file:') in str_lines
    if allow_unsafe:
        assert comment('#    pip-compile --allow-unsafe --output-file dst_file src_file src_file2') in str_lines
        assert 'setuptools' in str_lines
    else:
        assert comment('#    pip-compile --output-file dst_file src_file src_file2') in str_lines
        assert comment('# setuptools') in str_lines
    assert 'test==1.2' in str_lines


def test_write_header_emit_header(writer):
    expected_lines = (
        '#',
        '# This file is autogenerated by pip-compile',
        '# To update, run:',
        '#',
        '#    pip-compile --output-file dst_file src_file src_file2',
    )

    for line, expected_line in zip(writer.write_header(), expected_lines):
        assert line == comment(expected_line)


def test_write_header_no_emit_header(writer):
    writer.emit_header = False

    with raises(StopIteration):
        next(writer.write_header())


def test_write_header_custom_cmd(writer, monkeypatch):
    monkeypatch.setenv('CUSTOM_COMPILE_COMMAND', './pipcompilewrapper')
    assert comment('#    ./pipcompilewrapper') in writer.write_header()


@mark.parametrize(
    ('flag', 'attr', 'value'),
    [
        ('--no-index', 'emit_index', False),
        ('--no-emit-trusted-host', 'emit_trusted_host', False),
        ('--no-annotate', 'annotate', False),
        ('--generate-hashes', 'generate_hashes', True),
        ('--allow-unsafe', 'allow_unsafe', True),
    ])
def test_write_header_compile_flags(from_line, writer, flag, attr, value):
    setattr(writer, attr, value)
    assert comment(
        '#    pip-compile {} --output-file dst_file src_file src_file2'.format(flag)
    ) in list(writer.write_header())


def test_write_format_controls_no_binary(writer):
    packages = ['psycopg2', 'click']
    writer.format_control = FormatControl(no_binary=packages, only_binary=set())
    lines = set(writer.write_format_controls())

    for format_control in packages:
        assert '--no-binary {}'.format(format_control) in lines


def test_write_format_controls_only_binary(writer):
    packages = ['psycopg2', 'click']
    writer.format_control = FormatControl(only_binary=packages, no_binary=set())
    lines = set(writer.write_format_controls())

    for format_control in packages:
        assert '--only-binary {}'.format(format_control) in lines


def test_write_index_options_no_emit_index(writer):
    writer.emit_index = False
    with raises(StopIteration):
        next(writer.write_index_options())
